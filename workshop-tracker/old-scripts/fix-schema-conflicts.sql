-- ====================================================================
-- ≈ûEMA √áAKI≈ûMALARINI D√úZELTME VE TUTARLI ƒ∞Lƒ∞≈ûKƒ∞LER KURMA
-- Fix schema conflicts and establish consistent relationships
-- ====================================================================

DO $$
BEGIN
  RAISE NOTICE 'üîß ≈ûEMA √áAKI≈ûMALARI D√úZELTME BA≈ûLATILIYOR...';
  RAISE NOTICE 'Starting schema conflicts resolution...';
  RAISE NOTICE '';
END $$;

-- ====================================================================
-- ADIM 1: PROFILES TABLOSUNU ƒ∞Yƒ∞LE≈ûTƒ∞R (EMAIL KOLONU EKLE)
-- ====================================================================

DO $$
DECLARE
  email_column_exists BOOLEAN;
BEGIN
  RAISE NOTICE '1Ô∏è‚É£  PROFILES TABLOSUNA EMAIL KOLONU EKLENƒ∞YOR...';
  
  -- Email kolonu var mƒ± kontrol et
  SELECT EXISTS (
    SELECT 1 FROM information_schema.columns 
    WHERE table_schema = 'public' 
      AND table_name = 'profiles' 
      AND column_name = 'email'
  ) INTO email_column_exists;
  
  IF NOT email_column_exists THEN
    -- Email kolonu ekle
    ALTER TABLE profiles ADD COLUMN email TEXT;
    RAISE NOTICE '‚úÖ profiles.email kolonu eklendi';
    
    -- auth.users'dan email verilerini kopyala
    UPDATE profiles 
    SET email = au.email
    FROM auth.users au 
    WHERE profiles.id = au.id;
    
    RAISE NOTICE '‚úÖ Email verileri auth.users''dan profiles''e kopyalandƒ±';
  ELSE
    RAISE NOTICE '‚úÖ profiles.email kolonu zaten mevcut';
    
    -- Bo≈ü email deƒüerlerini g√ºncelle
    UPDATE profiles 
    SET email = au.email
    FROM auth.users au 
    WHERE profiles.id = au.id 
      AND (profiles.email IS NULL OR profiles.email = '');
      
    RAISE NOTICE '‚úÖ Bo≈ü email deƒüerleri g√ºncellendi';
  END IF;
END $$;

-- ====================================================================
-- ADIM 2: T√úM AUTH.USERS ƒ∞Lƒ∞≈ûKƒ∞LERƒ∞Nƒ∞ TESPƒ∞T ET VE TEMƒ∞ZLE
-- ====================================================================

DO $$
DECLARE
  constraint_name TEXT;
  constraint_count INTEGER := 0;
BEGIN
  RAISE NOTICE '';
  RAISE NOTICE '2Ô∏è‚É£  √áAKI≈ûAN AUTH.USERS ƒ∞Lƒ∞≈ûKƒ∞LERƒ∞ TEMƒ∞ZLENƒ∞YOR...';
  
  -- Auth.users'a baƒülƒ± t√ºm constraint'leri bul ve kaldƒ±r (profiles hari√ß)
  FOR constraint_name IN 
    SELECT tc.constraint_name
    FROM information_schema.table_constraints tc
    JOIN information_schema.key_column_usage kcu 
      ON tc.constraint_name = kcu.constraint_name
    JOIN information_schema.constraint_column_usage ccu 
      ON tc.constraint_name = ccu.constraint_name
    WHERE tc.constraint_type = 'FOREIGN KEY'
      AND tc.constraint_schema = 'public'
      AND ccu.table_name = 'users'
      AND ccu.column_name = 'id'
      AND tc.table_name != 'profiles'  -- profiles'deki ana ili≈ükiyi koru
  LOOP
    BEGIN
      EXECUTE format('ALTER TABLE %I DROP CONSTRAINT %I', 
        (SELECT table_name FROM information_schema.table_constraints 
         WHERE constraint_name = constraint_name AND constraint_schema = 'public'), 
        constraint_name);
      
      constraint_count := constraint_count + 1;
      RAISE NOTICE 'üóëÔ∏è  Kaldƒ±rƒ±ldƒ±: %', constraint_name;
    EXCEPTION 
      WHEN OTHERS THEN
        RAISE NOTICE '‚ùå Kaldƒ±rƒ±lamadƒ± %: %', constraint_name, SQLERRM;
    END;
  END LOOP;
  
  RAISE NOTICE '‚úÖ % adet √ßakƒ±≈üan constraint temizlendi', constraint_count;
END $$;

-- ====================================================================
-- ADIM 3: T√úM TABLOLARDA USER_ID/CREATED_BY KOLONLARINI KONTROL ET
-- ====================================================================

DO $$
DECLARE
  column_exists BOOLEAN;
BEGIN
  RAISE NOTICE '';
  RAISE NOTICE '3Ô∏è‚É£  USER ƒ∞Lƒ∞≈ûKƒ∞ KOLONLARI KONTROL EDƒ∞Lƒ∞YOR...';
  
  -- clients.created_by kontrol√º
  SELECT EXISTS (
    SELECT 1 FROM information_schema.columns 
    WHERE table_schema = 'public' AND table_name = 'clients' AND column_name = 'created_by'
  ) INTO column_exists;
  
  IF NOT column_exists THEN
    ALTER TABLE clients ADD COLUMN created_by UUID;
    RAISE NOTICE '‚úÖ clients.created_by kolonu eklendi';
  END IF;
  
  -- incomes.user_id kontrol√º
  SELECT EXISTS (
    SELECT 1 FROM information_schema.columns 
    WHERE table_schema = 'public' AND table_name = 'incomes' AND column_name = 'user_id'
  ) INTO column_exists;
  
  IF NOT column_exists THEN
    ALTER TABLE incomes ADD COLUMN user_id UUID;
    RAISE NOTICE '‚úÖ incomes.user_id kolonu eklendi';
  END IF;
  
  -- expenses.user_id kontrol√º
  SELECT EXISTS (
    SELECT 1 FROM information_schema.columns 
    WHERE table_schema = 'public' AND table_name = 'expenses' AND column_name = 'user_id'
  ) INTO column_exists;
  
  IF NOT column_exists THEN
    ALTER TABLE expenses ADD COLUMN user_id UUID;
    RAISE NOTICE '‚úÖ expenses.user_id kolonu eklendi';
  END IF;
  
  -- documents.uploaded_by kontrol√º
  SELECT EXISTS (
    SELECT 1 FROM information_schema.columns 
    WHERE table_schema = 'public' AND table_name = 'documents' AND column_name = 'uploaded_by'
  ) INTO column_exists;
  
  IF NOT column_exists THEN
    ALTER TABLE documents ADD COLUMN uploaded_by UUID;
    RAISE NOTICE '‚úÖ documents.uploaded_by kolonu eklendi';
  END IF;
  
  -- workshops.created_by kontrol√º (eƒüer tablo varsa)
  IF EXISTS (SELECT 1 FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'workshops') THEN
    SELECT EXISTS (
      SELECT 1 FROM information_schema.columns 
      WHERE table_schema = 'public' AND table_name = 'workshops' AND column_name = 'created_by'
    ) INTO column_exists;
    
    IF NOT column_exists THEN
      ALTER TABLE workshops ADD COLUMN created_by UUID;
      RAISE NOTICE '‚úÖ workshops.created_by kolonu eklendi';
    END IF;
  END IF;
END $$;

-- ====================================================================
-- ADIM 4: T√úM ƒ∞Lƒ∞≈ûKƒ∞LERƒ∞ PROFILES TABLOSUNA Y√ñNLENDƒ∞R
-- ====================================================================

DO $$
BEGIN
  RAISE NOTICE '';
  RAISE NOTICE '4Ô∏è‚É£  T√úM ƒ∞Lƒ∞≈ûKƒ∞LER PROFILES TABLOSUNA Y√ñNLENDƒ∞Rƒ∞Lƒ∞YOR...';
END $$;

-- clients.created_by ‚Üí profiles.id
DO $$
BEGIN
  BEGIN
    ALTER TABLE clients 
    ADD CONSTRAINT clients_created_by_profiles_fkey 
    FOREIGN KEY (created_by) REFERENCES profiles(id) ON DELETE SET NULL;
    
    RAISE NOTICE '‚úÖ clients.created_by ‚Üí profiles.id baƒülandƒ±';
  EXCEPTION 
    WHEN duplicate_object THEN
      RAISE NOTICE '‚ö†Ô∏è  clients_created_by_profiles_fkey zaten mevcut';
    WHEN OTHERS THEN
      RAISE NOTICE '‚ùå clients constraint hatasƒ±: %', SQLERRM;
  END;
END $$;

-- incomes.user_id ‚Üí profiles.id
DO $$
BEGIN
  BEGIN
    ALTER TABLE incomes 
    ADD CONSTRAINT incomes_user_id_profiles_fkey 
    FOREIGN KEY (user_id) REFERENCES profiles(id) ON DELETE SET NULL;
    
    RAISE NOTICE '‚úÖ incomes.user_id ‚Üí profiles.id baƒülandƒ±';
  EXCEPTION 
    WHEN duplicate_object THEN
      RAISE NOTICE '‚ö†Ô∏è  incomes_user_id_profiles_fkey zaten mevcut';
    WHEN OTHERS THEN
      RAISE NOTICE '‚ùå incomes constraint hatasƒ±: %', SQLERRM;
  END;
END $$;

-- expenses.user_id ‚Üí profiles.id
DO $$
BEGIN
  BEGIN
    ALTER TABLE expenses 
    ADD CONSTRAINT expenses_user_id_profiles_fkey 
    FOREIGN KEY (user_id) REFERENCES profiles(id) ON DELETE SET NULL;
    
    RAISE NOTICE '‚úÖ expenses.user_id ‚Üí profiles.id baƒülandƒ±';
  EXCEPTION 
    WHEN duplicate_object THEN
      RAISE NOTICE '‚ö†Ô∏è  expenses_user_id_profiles_fkey zaten mevcut';
    WHEN OTHERS THEN
      RAISE NOTICE '‚ùå expenses constraint hatasƒ±: %', SQLERRM;
  END;
END $$;

-- documents.uploaded_by ‚Üí profiles.id
DO $$
BEGIN
  BEGIN
    ALTER TABLE documents 
    ADD CONSTRAINT documents_uploaded_by_profiles_fkey 
    FOREIGN KEY (uploaded_by) REFERENCES profiles(id) ON DELETE SET NULL;
    
    RAISE NOTICE '‚úÖ documents.uploaded_by ‚Üí profiles.id baƒülandƒ±';
  EXCEPTION 
    WHEN duplicate_object THEN
      RAISE NOTICE '‚ö†Ô∏è  documents_uploaded_by_profiles_fkey zaten mevcut';
    WHEN OTHERS THEN
      RAISE NOTICE '‚ùå documents constraint hatasƒ±: %', SQLERRM;
  END;
END $$;

-- workshops.created_by ‚Üí profiles.id (eƒüer tablo varsa)
DO $$
BEGIN
  IF EXISTS (SELECT 1 FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'workshops') THEN
    BEGIN
      ALTER TABLE workshops 
      ADD CONSTRAINT workshops_created_by_profiles_fkey 
      FOREIGN KEY (created_by) REFERENCES profiles(id) ON DELETE SET NULL;
      
      RAISE NOTICE '‚úÖ workshops.created_by ‚Üí profiles.id baƒülandƒ±';
    EXCEPTION 
      WHEN duplicate_object THEN
        RAISE NOTICE '‚ö†Ô∏è  workshops_created_by_profiles_fkey zaten mevcut';
      WHEN OTHERS THEN
        RAISE NOTICE '‚ùå workshops constraint hatasƒ±: %', SQLERRM;
    END;
  END IF;
END $$;

-- ====================================================================
-- ADIM 5: NULL USER_ID DEƒûERLERƒ∞Nƒ∞ G√úNCELLE
-- ====================================================================

DO $$
DECLARE
  first_profile_id UUID;
  updated_clients INTEGER;
  updated_incomes INTEGER;
  updated_expenses INTEGER;
  updated_documents INTEGER;
BEGIN
  RAISE NOTICE '';
  RAISE NOTICE '5Ô∏è‚É£  NULL USER_ID DEƒûERLERƒ∞ G√úNCELLENƒ∞YOR...';
  
  -- ƒ∞lk profile id'sini al
  SELECT id INTO first_profile_id FROM profiles ORDER BY created_at ASC LIMIT 1;
  
  IF first_profile_id IS NOT NULL THEN
    -- clients tablosu
    UPDATE clients SET created_by = first_profile_id WHERE created_by IS NULL;
    GET DIAGNOSTICS updated_clients = ROW_COUNT;
    
    -- incomes tablosu
    UPDATE incomes SET user_id = first_profile_id WHERE user_id IS NULL;
    GET DIAGNOSTICS updated_incomes = ROW_COUNT;
    
    -- expenses tablosu
    UPDATE expenses SET user_id = first_profile_id WHERE user_id IS NULL;
    GET DIAGNOSTICS updated_expenses = ROW_COUNT;
    
    -- documents tablosu
    UPDATE documents SET uploaded_by = first_profile_id WHERE uploaded_by IS NULL;
    GET DIAGNOSTICS updated_documents = ROW_COUNT;
    
    RAISE NOTICE '‚úÖ G√ºncellenen kayƒ±tlar:';
    RAISE NOTICE '   - clients: % kayƒ±t', updated_clients;
    RAISE NOTICE '   - incomes: % kayƒ±t', updated_incomes;
    RAISE NOTICE '   - expenses: % kayƒ±t', updated_expenses;
    RAISE NOTICE '   - documents: % kayƒ±t', updated_documents;
  ELSE
    RAISE NOTICE '‚ö†Ô∏è  Profile bulunamadƒ±, user_id g√ºncellemesi yapƒ±lamadƒ±';
  END IF;
END $$;

-- ====================================================================
-- ADIM 6: SCHEMA CACHE YENƒ∞LEME
-- ====================================================================

DO $$
BEGIN
  RAISE NOTICE '';
  RAISE NOTICE '6Ô∏è‚É£  SCHEMA CACHE YENƒ∞LENƒ∞YOR...';
  
  -- √áoklu yenileme y√∂ntemleri
  NOTIFY pgrst, 'reload schema';
  NOTIFY pgrst, 'reload config'; 
  NOTIFY pgrst;
  
  -- Dummy config g√ºncelleme
  PERFORM set_config('app.schema_fix', NOW()::text, false);
  
  RAISE NOTICE 'üîÑ Schema cache yenileme sinyalleri g√∂nderildi';
END $$;

-- ====================================================================
-- ADIM 7: YENƒ∞ ≈ûEMA YAPISINI DOƒûRULA
-- ====================================================================

-- T√ºm profiles ili≈ükilerini g√∂ster
SELECT 
  'YENƒ∞_≈ûEMA_YAPISI' as verification,
  tc.table_name,
  kcu.column_name,
  tc.constraint_name,
  ccu.table_name AS referenced_table,
  ccu.column_name AS referenced_column
FROM information_schema.table_constraints tc
JOIN information_schema.key_column_usage kcu 
  ON tc.constraint_name = kcu.constraint_name
JOIN information_schema.constraint_column_usage ccu 
  ON tc.constraint_name = ccu.constraint_name
WHERE tc.constraint_type = 'FOREIGN KEY'
  AND tc.constraint_schema = 'public'
  AND (ccu.table_name = 'profiles' OR tc.table_name = 'profiles')
ORDER BY tc.table_name, kcu.column_name;

-- ƒ∞li≈üki testleri
SELECT 
  'ƒ∞Lƒ∞≈ûKƒ∞_TEST_SONU√áLARI' as test_name,
  'clients' as tablo,
  COUNT(*) as toplam_kayit,
  COUNT(p.id) as profile_ile_bagli,
  CASE 
    WHEN COUNT(*) = COUNT(p.id) THEN '‚úÖ T√úM ƒ∞Lƒ∞≈ûKƒ∞LER √áALI≈ûIYOR'
    WHEN COUNT(p.id) > 0 THEN '‚ö†Ô∏è KISMEN √áALI≈ûIYOR'
    ELSE '‚ùå ƒ∞Lƒ∞≈ûKƒ∞LER √áALI≈ûMIYOR'
  END as durum
FROM clients c
LEFT JOIN profiles p ON c.created_by = p.id

UNION ALL

SELECT 
  'ƒ∞Lƒ∞≈ûKƒ∞_TEST_SONU√áLARI',
  'incomes',
  COUNT(*),
  COUNT(p.id),
  CASE 
    WHEN COUNT(*) = COUNT(p.id) THEN '‚úÖ T√úM ƒ∞Lƒ∞≈ûKƒ∞LER √áALI≈ûIYOR'
    WHEN COUNT(p.id) > 0 THEN '‚ö†Ô∏è KISMEN √áALI≈ûIYOR'
    ELSE '‚ùå ƒ∞Lƒ∞≈ûKƒ∞LER √áALI≈ûMIYOR'
  END
FROM incomes i
LEFT JOIN profiles p ON i.user_id = p.id

UNION ALL

SELECT 
  'ƒ∞Lƒ∞≈ûKƒ∞_TEST_SONU√áLARI',
  'expenses',
  COUNT(*),
  COUNT(p.id),
  CASE 
    WHEN COUNT(*) = COUNT(p.id) THEN '‚úÖ T√úM ƒ∞Lƒ∞≈ûKƒ∞LER √áALI≈ûIYOR'
    WHEN COUNT(p.id) > 0 THEN '‚ö†Ô∏è KISMEN √áALI≈ûIYOR'
    ELSE '‚ùå ƒ∞Lƒ∞≈ûKƒ∞LER √áALI≈ûMIYOR'
  END
FROM expenses e
LEFT JOIN profiles p ON e.user_id = p.id;

-- ====================================================================
-- FINAL √ñZET
-- ====================================================================

DO $$
BEGIN
  RAISE NOTICE '';
  RAISE NOTICE '=== ≈ûEMA √áAKI≈ûMALARI D√úZELTME √ñZET ===';
  RAISE NOTICE '';
  RAISE NOTICE 'YAPILAN ƒ∞Yƒ∞LE≈ûTƒ∞RMELER:';
  RAISE NOTICE '‚úÖ profiles.email kolonu eklendi ve dolduruldu';
  RAISE NOTICE '‚úÖ √áakƒ±≈üan auth.users constraint''leri temizlendi';
  RAISE NOTICE '‚úÖ T√ºm user ili≈ükileri profiles tablosuna y√∂nlendirildi:';
  RAISE NOTICE '   - clients.created_by ‚Üí profiles.id';
  RAISE NOTICE '   - incomes.user_id ‚Üí profiles.id';
  RAISE NOTICE '   - expenses.user_id ‚Üí profiles.id';
  RAISE NOTICE '   - documents.uploaded_by ‚Üí profiles.id';
  RAISE NOTICE '   - workshops.created_by ‚Üí profiles.id (varsa)';
  RAISE NOTICE '‚úÖ NULL deƒüerler g√ºncellendi';
  RAISE NOTICE '‚úÖ Schema cache yenilendi';
  RAISE NOTICE '';
  RAISE NOTICE 'YENƒ∞ TUTARLI ≈ûEMA:';
  RAISE NOTICE 'auth.users ‚Üí profiles (1:1 ana ili≈üki)';
  RAISE NOTICE 'profiles ‚Üê [clients, incomes, expenses, documents, workshops]';
  RAISE NOTICE '';
  RAISE NOTICE 'SONRAKƒ∞ ADIMLAR:';
  RAISE NOTICE '1. 30 saniye bekleyin (cache propagation)';
  RAISE NOTICE '2. Frontend sorgularƒ±nƒ± test edin';
  RAISE NOTICE '3. Analytics sayfasƒ±nƒ± yeniden deneyin';
  RAISE NOTICE '';
  RAISE NOTICE 'D√ºzeltme tarihi: %', NOW();
END $$; 